csiDriver:
  name: "org.democratic-csi.nfs-client"
storageClasses:
# changed the name from nfs-client, so it runs in parallel with nfs-client-provisioner
- name: democratic-nfs-client
  defaultClass: true
# set to Retain, so PVC will be left alone on delete
  reclaimPolicy: Retain
  volumeBindingMode: Immediate
  allowVolumeExpansion: false
  parameters:
    fsType: nfs
# use nfsvers=4, since my NAS support that
  mountOptions:
  - noatime
  - nfsvers=4
  secrets:
    provisioner-secret:
    controller-publish-secret:
    node-stage-secret:
    node-publish-secret:
    controller-expand-secret:
volumeSnapshotClasses: []
# only needs controller, and the csi node client daemonset
controller:
  enabled: true
  externalResizer:
    enabled: false
  strategy: deployment
  hostNetwork: true
  hostIPC: true
# for the controller, it manually mount from the remote NFS sevrer on start, so it can dynamically create PVC (the "crude" part)
  driver:
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        add:
        - SYS_ADMIN
      privileged: true
    lifecycle:
      postStart:
        exec:
          command: ["/bin/sh", "-c", "mkdir -p /nfs-storage; mount <my NFS server>:/nfs-storage /nfs-storage"]
      preStop:
        exec:
          command: ["/bin/sh","-c","umount /nfs-storage"]
# provide the config to controller how to map and setup a PVC
driver:
  config:
    driver: nfs-client
    instance_id: <some random guid>
    nfs:
      shareHost: 192.168.1.236
      shareBasePath: "/volume1/k8sstorage"
      controllerBasePath: "/volume1/k8sstorage"
# allow control to PVC creation user and permission
      dirPermissionsMode: "0700"
      dirPermissionsUser: 1000
      dirPermissionsGroup: 1000